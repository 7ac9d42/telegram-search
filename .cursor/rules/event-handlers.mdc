---
description:
globs:
alwaysApply: false
---
# 事件处理系统

项目使用基于事件的架构进行模块间通信。事件处理系统实现位于 [packages/core/src/event-handler.ts](mdc:packages/core/src/event-handler.ts) 和 [packages/core/src/event-handlers/](mdc:packages/core/src/event-handlers/) 目录。

## 事件处理器结构

事件处理器负责连接不同服务，并处理它们之间的通信。主要分为两类：

1. **认证事件处理器** (`authEventHandler`): 处理连接和会话相关事件
2. **连接后事件处理器** (`afterConnectedEventHandler`): 处理认证成功后的事件

## 主要事件处理器

项目包含多个专门的事件处理器模块：

- [auth.ts](mdc:packages/core/src/event-handlers/auth.ts): 处理认证事件
- [session.ts](mdc:packages/core/src/event-handlers/session.ts): 处理会话事件
- [message.ts](mdc:packages/core/src/event-handlers/message.ts): 处理消息事件
- [dialog.ts](mdc:packages/core/src/event-handlers/dialog.ts): 处理对话事件
- [entity.ts](mdc:packages/core/src/event-handlers/entity.ts): 处理实体事件
- [takeout.ts](mdc:packages/core/src/event-handlers/takeout.ts): 处理导出事件
- [storage.ts](mdc:packages/core/src/event-handlers/storage.ts): 处理存储事件
- [config.ts](mdc:packages/core/src/event-handlers/config.ts): 处理配置事件

## 事件处理流程

1. 初始化核心上下文 (`CoreContext`)
2. 注册事件处理器
3. 处理器监听特定事件
4. 服务发出事件
5. 处理器接收并处理事件，可能调用其他服务或发出新事件

## 使用方式

### 注册事件处理器

```ts
import { useEventHandler, authEventHandler, afterConnectedEventHandler } from '@tg-search/core'
import { useConfig } from '@tg-search/common'

const ctx = createCoreContext()
const config = useConfig()
const eventHandler = useEventHandler(ctx, config)

// 注册认证事件处理器
eventHandler.register(authEventHandler)

// 注册连接后事件处理器
eventHandler.register(afterConnectedEventHandler)
```

### 创建自定义事件处理器

```ts
function customEventHandler(ctx: CoreContext, config: Config): EventHandler {
  const { emitter } = ctx
  
  // 注册事件监听
  emitter.on('custom:event', (data) => {
    // 处理事件
    console.log('收到自定义事件:', data)
    
    // 可能发出其他事件
    emitter.emit('custom:response', { success: true })
  })
  
  return () => {}
}
```

## 解析器注册

事件处理系统与解析器注册表集成，用于管理特定类型的解析器：

```ts
// 在连接后注册解析器
registry.register('embedding', createEmbeddingResolver())
registry.register('link', createLinkResolver())
registry.register('user', createUserResolver())
```
