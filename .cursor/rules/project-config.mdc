---
description:
globs:
alwaysApply: false
---
# 项目配置

项目使用 YAML 格式的配置文件，默认位于 `config/config.yaml`。配置架构在 [packages/common/src/helper/config-schema.ts](mdc:packages/common/src/helper/config-schema.ts) 中定义，默认配置在 [packages/common/src/helper/default-config.ts](mdc:packages/common/src/helper/default-config.ts) 中提供。

## 配置结构

配置文件包含以下主要部分：

### 数据库配置

```yaml
database:
  host: localhost
  port: 5432
  user: postgres
  password: postgres
  database: postgres
  url: # 可选，数据库连接 URL
```

### 消息导出配置

```yaml
message:
  export:
    batchSize: 200  # 每次请求获取的消息数
    concurrent: 3   # 并发请求数
    retryTimes: 3   # 重试次数
    maxTakeoutRetries: 3  # 导出会话重试次数
  batch:
    size: 100  # 批量保存消息的大小
```

### 路径配置

```yaml
path:
  storage: ~/.telegram-search  # 存储路径
```

### API 配置

```yaml
api:
  telegram:
    apiId: "YOUR_API_ID"  # Telegram API ID
    apiHash: "YOUR_API_HASH"  # Telegram API Hash
    phoneNumber: "+1234567890"  # 电话号码，带国家代码
    proxy:  # 可选代理配置
      ip: ""  # 代理服务器 IP 或主机名
      port: 0  # 代理服务器端口
      MTProxy: false  # 是否使用 MTProxy
      secret: ""  # MTProxy 密钥
      socksType: 5  # Socks 代理类型 (4 或 5)
      timeout: 2  # 连接超时（秒）
      username: ""  # 代理认证用户名
      password: ""  # 代理认证密码
  embedding:
    provider: openai  # 嵌入提供商 (openai 或 ollama)
    model: text-embedding-3-small  # 嵌入模型
    apiKey: ""  # API 密钥
    apiBase: ""  # 可选的 API 基础 URL
```

## 配置访问

使用 `useConfig()` 函数可以在代码中访问配置：

```ts
import { useConfig } from '@packages/common'

const config = useConfig()
console.log(config.api.telegram.apiId)
```

## 配置验证

配置使用 Valibot 进行验证，确保所有必需的字段都存在且格式正确。
