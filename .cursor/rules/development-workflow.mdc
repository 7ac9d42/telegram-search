---
description:
globs:
alwaysApply: false
---
# 开发工作流

项目使用 pnpm 作为包管理器，采用 monorepo 结构组织代码。开发流程和命令定义在 [package.json](mdc:package.json) 中。

## 环境设置

1. 安装依赖：

```bash
# 使用 pnpm 安装项目依赖
pnpm install

# 如果安装了 ni，也可以使用更简洁的命令
# ni
```

2. 配置环境：

```bash
# 复制配置示例
cp config/config.example.yaml config/config.yaml

# 编辑配置文件，填入 Telegram API 凭据
```

3. 启动数据库：

```bash
# 启动 PostgreSQL 容器
docker compose up -d
```

4. 初始化数据库：

```bash
# 运行数据库迁移（使用 pnpm）
pnpm run db migrate

# 如果安装了 nr，可以使用更简洁的命令
# nr db migrate
```

## 开发命令

### 构建

```bash
# 构建所有包
pnpm run build
# 或使用 nr：nr build

# 构建特定包
pnpm run packages:build
# 或使用 nr：nr packages:build

# 构建服务器
pnpm run build:server
# 或使用 nr：nr build:server
```

### 开发服务

```bash
# 启动后端服务
pnpm run dev:server
# 或使用 nr：nr dev:server

# 启动前端开发服务器
pnpm run dev:frontend
# 或使用 nr：nr dev:frontend
```

### 数据库操作

```bash
# 生成迁移
pnpm run db generate
# 或使用 nr：nr db generate

# 应用迁移
pnpm run db migrate
# 或使用 nr：nr db migrate

# 检查迁移状态
pnpm run db status
# 或使用 nr：nr db status
```

### 代码质量

```bash
# 运行 ESLint
pnpm run lint
# 或使用 nr：nr lint

# 修复 ESLint 问题
pnpm run lint:fix
# 或使用 nr：nr lint:fix

# 类型检查
pnpm run typecheck
# 或使用 nr：nr typecheck

# 运行测试
pnpm run test
# 或使用 nr：nr test

# 生成测试覆盖率报告
pnpm run test:coverage
# 或使用 nr：nr test:coverage
```

### 版本管理

```bash
# 更新版本号
pnpm run bump
# 或使用 nr：nr bump

# 更新依赖版本
pnpm run bump:deps
# 或使用 nr：nr bump:deps
```

## 代码提交

项目使用 Husky 和 lint-staged 确保提交前进行代码检查：

```bash
# 提交代码
git add .
git commit -m "feat: 添加新功能"
```

提交前会自动运行 ESLint 检查。
