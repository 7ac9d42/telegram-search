---
description:
globs:
alwaysApply: false
---
# Telegram 上下文管理

[packages/core/src/context.ts](mdc:packages/core/src/context.ts) 提供了 Telegram 客户端和事件管理的核心上下文。

## 上下文结构

`CoreContext` 是应用的中央上下文，包含：

- `emitter`: 事件总线，用于服务间通信
- `setClient`: 设置 TelegramClient 实例
- `getClient`: 获取 TelegramClient 实例
- `withError`: 错误处理工具
- 事件注册和跟踪功能

## 事件系统

上下文实现了基于 `EventEmitter` 的事件系统，分为两类事件：

1. `ToCoreEvent`: 发送到核心的事件 (外部→核心)
2. `FromCoreEvent`: 从核心发出的事件 (核心→外部)

事件类型在各服务模块中定义，例如：
- 消息事件 (`MessageEventFromCore`, `MessageEventToCore`)
- 会话事件 (`SessionEventFromCore`, `SessionEventToCore`)
- 连接事件 (`ConnectionEventFromCore`, `ConnectionEventToCore`)

## 使用方式

### 创建上下文

```ts
import { createCoreContext } from '@tg-search/core'

const ctx = createCoreContext()
```

### 注册服务

```ts
import { useService } from '@tg-search/core'
import { createMessageService } from '@tg-search/core/services'

// 注册消息服务
const messageService = useService(ctx, createMessageService)
```

### 发送和接收事件

```ts
// 监听事件
ctx.emitter.on('message:received', (message) => {
  console.log('收到消息:', message)
})

// 发送事件
ctx.emitter.emit('connection:connect', { phoneNumber: '+1234567890' })
```

### 设置 Telegram 客户端

```ts
import { TelegramClient } from 'telegram'

const client = new TelegramClient(/* ... */)
ctx.setClient(client)

// 获取客户端
const client = ctx.getClient()
```

## 错误处理

上下文提供了 `withError` 方法用于统一错误处理：

```ts
try {
  // 操作
} catch (error) {
  throw ctx.withError('操作失败', error)
}
```
