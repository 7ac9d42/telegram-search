name: Release Docker / OCI

permissions:
  contents: read
  packages: write

on:
  push:
    tags:
      - '**'
  workflow_dispatch:

jobs:
  ghcr_build:
    name: Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Fetch version
        id: version
        run: |
          export LAST_TAGGED_COMMIT=$(git rev-list --tags --max-count=1)
          if [ -z "$LAST_TAGGED_COMMIT" ]; then
            echo "No tags found, using 'dev' as version"
            echo "version=dev" >> $GITHUB_OUTPUT
          else
            export LAST_TAG=$(git describe --tags $LAST_TAGGED_COMMIT)
            echo "version=${LAST_TAG#v}" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm64/v8

      - name: Sign in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create image tags
        id: image_tag
        run: |
          IMAGE_VERSION="${{ steps.version.outputs.version }}"
          IMAGE_REPO="ghcr.io/${{ github.repository }}"
          if [[ "$IMAGE_VERSION" == *beta* ]]; then
            echo "tags<<EOF" >> $GITHUB_OUTPUT
            echo "$IMAGE_REPO:$IMAGE_VERSION" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "tags<<EOF" >> $GITHUB_OUTPUT
            echo "$IMAGE_REPO:$IMAGE_VERSION" >> $GITHUB_OUTPUT
            echo "$IMAGE_REPO:latest" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push
        uses: docker/build-push-action@v6
        with:
          context: ./
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64,linux/arm64/v8
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: ${{ steps.image_tag.outputs.tags }}
